// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String
  password_hash     String    // Updated field name for consistency
  role              String    @default("reader") // "reader" | "editor" | "admin"
  is_verified       Boolean   @default(false)
  is_active         Boolean   @default(true)
  avatar_url        String?
  bio               String?
  preferences       Json?     // JSON object for user preferences
  phone             String?   // Optional phone number
  failed_login_attempts Int   @default(0)
  locked_until      DateTime? // Account lockout timestamp
  password_reset_token String?
  password_reset_expires DateTime?
  email_verification_token String?
  email_verification_expires DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  last_login        DateTime?
  
  // Relations
  articles          Article[]
  sessions          Session[]
  analytics_events  AnalyticsEvent[]
  user_interests    UserInterest[]
  recommendations   Recommendation[]
  article_likes     ArticleLike[]
  article_bookmarks ArticleBookmark[]
  comments          Comment[]
  reason_feedback   RecommendationReasonFeedback[]
  audit_logs        AuditLog[]
  user_behavior     UserBehavior?
  user_sessions     UserSession[]
  recommendation_logs RecommendationLog[]
  interest_profile  UserInterestProfile?
  
  // CMS Relations
  article_revisions ArticleRevision[]
  media_files       MediaFile[]
  collaborations    ArticleCollaborator[]
  added_collaborators ArticleCollaborator[] @relation("AddedCollaborators")
  content_templates ContentTemplate[]
  assigned_workflows WorkflowStatus[] @relation("AssignedWorkflows")
  changed_workflows WorkflowStatus[] @relation("ChangedWorkflows")
  editing_sessions  EditingSession[]
  
  // Interaction Relations
  article_comments  ArticleComment[]
  comment_likes     CommentLike[]
  comment_reports   CommentReport[]
  article_shares    ArticleShare[]
  notifications     Notification[]
  sent_notifications Notification[] @relation("NotificationSender")
  
  // Loyalty System Relations
  loyalty_points    LoyaltyPoint[]
  user_badges       UserBadge[]
  loyalty_transactions LoyaltyTransaction[]
  achievements      UserAchievement[]
  loyalty_stats     UserLoyaltyStats?
  realtime_notifications RealTimeNotification[]
  sent_realtime_notifications RealTimeNotification[] @relation("NotificationSender")
  notification_settings UserNotificationSettings?
  
  // AI Moderation Relations
  comment_appeals       CommentAppeal[]
  moderation_training   ModerationTrainingData[]
  moderation_configs    ModerationConfig[]
  
  @@map("users")
}

model Session {
  id             String    @id @default(uuid())
  user_id        String
  jwt_token      String    @unique // JWT token for this session
  refresh_token  String?   @unique // Optional refresh token
  device_info    Json?     // Device, browser, OS info
  ip_address     String?
  user_agent     String?   // Browser user agent
  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  expires_at     DateTime  // JWT expiration time
  last_used      DateTime  @default(now())
  
  // Relations
  user           User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  analytics_events AnalyticsEvent[]
  reason_feedback RecommendationReasonFeedback[]
  
  @@map("sessions")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  color       String?   // Hex color for UI
  icon        String?   // Icon name or URL
  is_active   Boolean   @default(true)
  sort_order  Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  articles    Article[]
  user_interests UserInterest[]
  
  @@map("categories")
}

model Article {
  id              String    @id @default(uuid())
  title           String
  slug            String    @unique
  summary         String?
  content         String
  featured_image  String?
  category_id     String
  author_id       String
  status          String    @default("draft") // draft, published, archived, scheduled, in_review
  featured        Boolean   @default(false)
  view_count      Int       @default(0)
  like_count      Int       @default(0)
  comment_count   Int       @default(0)
  share_count     Int       @default(0)
  reading_time    Int?      // estimated reading time in minutes
  tags            String[]  // Array of tags
  seo_data        Json?     // SEO metadata
  published_at    DateTime?
  scheduled_at    DateTime? // For scheduled publishing
  archived_at     DateTime? // When article was archived
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  category        Category  @relation(fields: [category_id], references: [id])
  author          User      @relation(fields: [author_id], references: [id])
  analytics_events AnalyticsEvent[]
  recommendations Recommendation[]
  article_likes   ArticleLike[]
  article_bookmarks ArticleBookmark[]
  comments        Comment[]
  recommendation_logs RecommendationLog[]
  
  // CMS Relations
  revisions       ArticleRevision[]
  article_tags    ArticleTag[]
  collaborators   ArticleCollaborator[]
  workflow_status WorkflowStatus[]
  editing_sessions EditingSession[]
  
  // Interaction Relations
  article_comments ArticleComment[]
  article_shares   ArticleShare[]
  
  @@map("articles")
}

model AnalyticsEvent {
  id           String    @id @default(uuid())
  event_type   String    // page_view, scroll, like, share, comment, search, navigate, reading_time, etc.
  event_data   Json      // Additional event-specific data
  article_id   String?   // Related article (if applicable)
  user_id      String?   // User who performed the action (if logged in)
  session_id   String?   // Session identifier
  ip_address   String?   // For anonymous tracking
  user_agent   String?   // Browser/device information
  referrer     String?   // Where the user came from
  page_url     String?   // Current page URL
  timestamp    DateTime  @default(now())
  processed    Boolean   @default(false) // For batch processing
  
  // Relations
  article      Article?  @relation(fields: [article_id], references: [id])
  user         User?     @relation(fields: [user_id], references: [id])
  session      Session?  @relation(fields: [session_id], references: [id])
  
  @@map("analytics_events")
}

model UserInterest {
  id            String    @id @default(uuid())
  user_id       String
  category_id   String?
  topic         String?   // Specific topic/keyword
  interest_score Float    @default(0.0) // Calculated interest score
  decay_factor  Float    @default(1.0) // For time-based decay
  last_updated  DateTime  @default(now())
  created_at    DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [user_id], references: [id])
  category      Category? @relation(fields: [category_id], references: [id])
  
  @@unique([user_id, category_id])
  @@unique([user_id, topic])
  @@map("user_interests")
}

model Recommendation {
  id             String    @id @default(uuid())
  user_id        String
  article_id     String
  score          Float     // Recommendation score
  reason         String?   // Why this was recommended
  algorithm      String    // Which algorithm generated this
  context        String?   // Context of recommendation (homepage, article_page, etc.)
  shown_at       DateTime?
  clicked_at     DateTime?
  dismissed_at   DateTime?
  created_at     DateTime  @default(now())
  expires_at     DateTime? // When recommendation expires
  
  // Relations
  user           User      @relation(fields: [user_id], references: [id])
  article        Article   @relation(fields: [article_id], references: [id])
  reason_feedback RecommendationReasonFeedback[]
  
  @@unique([user_id, article_id, context])
  @@map("recommendations")
}

model RecommendationReasonFeedback {
  id                    String    @id @default(uuid())
  recommendation_id     String
  reason_text           String    // The reason text that was shown
  feedback              String    // "clear" | "unclear" | "helpful" | "not_helpful"
  note                  String?   // Optional user note
  improvement_suggestion String?   // Optional improvement suggestion
  user_id               String?   // User who provided feedback (if logged in)
  session_id            String?   // Session identifier
  ip_address            String?   // For anonymous feedback
  user_agent            String?   // Browser/device information
  created_at            DateTime  @default(now())
  
  // Relations
  recommendation        Recommendation @relation(fields: [recommendation_id], references: [id])
  user                  User?          @relation(fields: [user_id], references: [id])
  session               Session?       @relation(fields: [session_id], references: [id])
  
  @@map("recommendation_reason_feedback")
}

model ArticleLike {
  id         String   @id @default(uuid())
  user_id    String
  article_id String
  created_at DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [user_id], references: [id])
  article    Article  @relation(fields: [article_id], references: [id])
  
  @@unique([user_id, article_id])
  @@map("article_likes")
}

model ArticleBookmark {
  id         String   @id @default(uuid())
  user_id    String
  article_id String
  created_at DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [user_id], references: [id])
  article    Article  @relation(fields: [article_id], references: [id])
  
  @@unique([user_id, article_id])
  @@map("article_bookmarks")
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  user_id    String
  article_id String
  parent_id  String?  // For nested comments
  is_approved Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // Relations
  user       User     @relation(fields: [user_id], references: [id])
  article    Article  @relation(fields: [article_id], references: [id])
  parent     Comment? @relation("CommentReplies", fields: [parent_id], references: [id])
  replies    Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

model Integration {
  id          String   @id @default(uuid())
  name        String   @unique
  type        String   // analytics, marketing, social, etc.
  config      Json     // Configuration data
  is_active   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@map("integrations")
}

model AuditLog {
  id          String   @id @default(uuid())
  user_id     String?  // User who performed the action (if applicable)
  action      String   // login, logout, failed_login, register, password_change, etc.
  resource    String?  // Resource affected (user, article, etc.)
  resource_id String?  // ID of the resource
  details     Json?    // Additional details about the action
  ip_address  String?  // IP address of the user
  user_agent  String?  // Browser/device information
  success     Boolean  @default(true)
  error_message String? // Error message if action failed
  created_at  DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [user_id], references: [id])
  
  @@map("audit_logs")
}

// Additional Analytics Models
model UserBehavior {
  id                    String   @id @default(uuid())
  user_id               String   @unique
  total_sessions        Int      @default(0)
  total_page_views      Int      @default(0)
  total_time_spent      Int      @default(0) // in seconds
  avg_session_duration  Float    @default(0)
  bounce_rate           Float    @default(0)
  pages_per_session     Float    @default(0)
  favorite_categories   Json?    // array of category preferences
  reading_speed         Float    @default(0) // words per minute
  interaction_score     Float    @default(0) // engagement score
  last_activity_at      DateTime?
  updated_at            DateTime @updatedAt
  created_at            DateTime @default(now())
  
  user User @relation(fields: [user_id], references: [id])
  
  @@map("user_behaviors")
}

model ContentAnalytics {
  id                String   @id @default(uuid())
  content_id        String   // article, page, or content identifier
  content_type      String   // article, page, video, etc.
  title             String?
  url               String?
  views             Int      @default(0)
  unique_views      Int      @default(0)
  avg_time_on_page  Float    @default(0)
  bounce_rate       Float    @default(0)
  shares            Int      @default(0)
  likes             Int      @default(0)
  comments          Int      @default(0)
  scroll_depth      Float    @default(0) // percentage
  conversion_rate   Float    @default(0)
  traffic_sources   Json?    // breakdown of traffic sources
  top_keywords      Json?    // search keywords leading to content
  performance_score Float    @default(0)
  updated_at        DateTime @updatedAt
  created_at        DateTime @default(now())
  
  @@unique([content_id, content_type])
  @@index([content_type])
  @@index([views])
  @@index([performance_score])
  @@map("content_analytics")
}

model UserSession {
  id              String   @id @default(uuid())
  user_id         String?
  session_id      String   @unique
  start_time      DateTime @default(now())
  end_time        DateTime?
  duration        Int?     // in seconds
  page_views      Int      @default(0)
  events_count    Int      @default(0)
  ip_address      String?
  user_agent      String?
  country         String?
  city            String?
  device_type     String?
  browser         String?
  os              String?
  referrer        String?
  landing_page    String?
  exit_page       String?
  is_bounce       Boolean  @default(false)
  conversion_goal String?
  converted       Boolean  @default(false)
  updated_at      DateTime @updatedAt
  
  user User? @relation(fields: [user_id], references: [id])
  
  @@index([user_id])
  @@index([start_time])
  @@index([session_id])
  @@map("user_sessions")
}

model RealtimeMetrics {
  id              String   @id @default(uuid())
  metric_type     String   // active_users, page_views, events, etc.
  metric_name     String
  value           Float
  dimensions      Json?    // additional breakdown data
  timestamp       DateTime @default(now())
  
  @@index([metric_type])
  @@index([timestamp])
  @@map("realtime_metrics")
}

// New Recommendation System Models
model RecommendationLog {
  id                  String   @id @default(uuid())
  user_id             String?
  session_id          String?
  article_id          String
  algorithm_type      String   // 'personal', 'collaborative', 'graph', 'ai', 'trending'
  reason_type         String   // 'interest', 'trending', 'diversity', 'ai', 'collaborative', 'graph'
  reason_explanation  String
  score               Float?
  shown               Boolean  @default(false)
  clicked             Boolean  @default(false)
  feedback            String?  // 'like', 'dislike', 'report', 'not_interested', 'already_read'
  context_data        Json?    // Additional context like time, location, device
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  
  user                User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  article             Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  
  @@index([user_id, created_at])
  @@index([session_id, created_at])
  @@index([article_id, created_at])
  @@index([algorithm_type, created_at])
  @@map("recommendation_log")
}

model UserInterestProfile {
  id                  String   @id @default(uuid())
  user_id             String   @unique
  interests           Json     // { "technology": 0.8, "sports": 0.3, "politics": 0.1 }
  categories          Json     // Category preferences
  reading_patterns    Json     // Time preferences, device preferences, etc.
  behavioral_signals  Json     // Engagement patterns, reading speed, etc.
  last_updated        DateTime @default(now())
  created_at          DateTime @default(now())
  
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("user_interest_profile")
}

model RecommendationMetrics {
  id                  String   @id @default(uuid())
  algorithm_type      String
  total_shown         Int      @default(0)
  total_clicked       Int      @default(0)
  total_liked         Int      @default(0)
  total_disliked      Int      @default(0)
  click_through_rate  Float    @default(0.0)
  satisfaction_rate   Float    @default(0.0)
  date                DateTime @default(now())
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  
  @@unique([algorithm_type, date])
  @@map("recommendation_metrics")
}

model SimilarityMatrix {
  id                  String   @id @default(uuid())
  item_a_id           String   // Article ID
  item_b_id           String   // Article ID
  similarity_score    Float    // Cosine similarity or other metric
  algorithm_type      String   // 'content', 'collaborative', 'hybrid'
  last_calculated     DateTime @default(now())
  
  @@unique([item_a_id, item_b_id, algorithm_type])
  @@index([item_a_id])
  @@index([item_b_id])
  @@index([similarity_score])
  @@map("similarity_matrix")
}

// CMS Models - Content Management System

model ArticleRevision {
  id              String   @id @default(uuid())
  article_id      String
  title           String
  content         String
  summary         String?
  author_id       String
  revision_number Int
  change_summary  String?  // Summary of changes made
  created_at      DateTime @default(now())
  
  article         Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  author          User     @relation(fields: [author_id], references: [id])
  
  @@index([article_id, revision_number])
  @@index([created_at])
  @@map("article_revisions")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  is_active   Boolean  @default(true)
  usage_count Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  article_tags ArticleTag[]
  
  @@map("tags")
}

model ArticleTag {
  id         String @id @default(uuid())
  article_id String
  tag_id     String
  
  article    Article @relation(fields: [article_id], references: [id], onDelete: Cascade)
  tag        Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  
  @@unique([article_id, tag_id])
  @@map("article_tags")
}

model MediaFile {
  id           String   @id @default(uuid())
  filename     String
  original_name String
  file_path    String
  file_url     String
  file_type    String   // image, video, audio, document
  mime_type    String
  file_size    Int      // in bytes
  width        Int?     // for images/videos
  height       Int?     // for images/videos
  duration     Int?     // for videos/audio in seconds
  alt_text     String?
  caption      String?
  uploaded_by  String
  is_public    Boolean  @default(true)
  usage_count  Int      @default(0)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  uploader     User     @relation(fields: [uploaded_by], references: [id])
  
  @@index([file_type])
  @@index([uploaded_by])
  @@index([created_at])
  @@map("media_files")
}

model ArticleCollaborator {
  id         String   @id @default(uuid())
  article_id String
  user_id    String
  role       String   // 'editor', 'reviewer', 'viewer'
  added_by   String
  added_at   DateTime @default(now())
  
  article    Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  added_by_user User  @relation("AddedCollaborators", fields: [added_by], references: [id])
  
  @@unique([article_id, user_id])
  @@map("article_collaborators")
}

model ContentTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  template    Json     // Template structure
  category    String   // 'news', 'feature', 'interview', etc.
  is_active   Boolean  @default(true)
  created_by  String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  creator     User     @relation(fields: [created_by], references: [id])
  
  @@map("content_templates")
}

model WorkflowStatus {
  id          String   @id @default(uuid())
  article_id  String
  status      String   // 'draft', 'in_review', 'approved', 'published', 'archived'
  assigned_to String?
  notes       String?
  changed_by  String
  changed_at  DateTime @default(now())
  
  article     Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  assignee    User?    @relation("AssignedWorkflows", fields: [assigned_to], references: [id])
  changer     User     @relation("ChangedWorkflows", fields: [changed_by], references: [id])
  
  @@index([article_id, changed_at])
  @@index([assigned_to])
  @@map("workflow_status")
}

model EditingSession {
  id              String   @id @default(uuid())
  article_id      String
  user_id         String
  session_token   String   @unique
  is_active       Boolean  @default(true)
  last_activity   DateTime @default(now())
  cursor_position Json?    // Cursor position for collaborative editing
  created_at      DateTime @default(now())
  
  article         Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([article_id, is_active])
  @@index([user_id])
  @@map("editing_sessions")
}

// Interaction System Models - Comments, Likes, Shares, Reports

model ArticleComment {
  id          String   @id @default(uuid())
  article_id  String
  user_id     String
  content     String
  parent_id   String?  // For nested comments/replies
  status      String   @default("pending") // pending, approved, rejected, needs_review, hidden
  like_count  Int      @default(0)
  reply_count Int      @default(0)
  report_count Int     @default(0)
  is_pinned   Boolean  @default(false)
  is_edited   Boolean  @default(false)
  edited_at   DateTime?
  
  // AI Moderation Fields
  ai_category   String?  // spam, bullying, hate, politics, nsfw, normal, toxic, inappropriate
  ai_risk_score Float?   // 0.0 to 1.0 risk score from AI
  ai_reasons    Json?    // Array of reasons/keywords detected by AI
  ai_notes      String?  // Additional AI analysis notes
  ai_confidence Float?   // AI confidence level (0.0 to 1.0)
  ai_processed  Boolean  @default(false)
  ai_processed_at DateTime?
  
  // Human Review Fields
  reviewed_by   String?  // Admin user ID who reviewed
  reviewed_at   DateTime?
  review_notes  String?  // Human reviewer notes
  user_flagged  Boolean  @default(false)
  
  // Timestamps
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  article     Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent      ArticleComment? @relation("CommentReplies", fields: [parent_id], references: [id])
  replies     ArticleComment[] @relation("CommentReplies")
  likes       CommentLike[]
  reports     CommentReport[]
  appeals     CommentAppeal[]
  
  @@index([article_id, status])
  @@index([user_id])
  @@index([parent_id])
  @@index([created_at])
  @@index([status])
  @@index([ai_category])
  @@index([ai_risk_score])
  @@index([ai_processed])
  @@index([reviewed_by])
  @@map("article_comments")
}

model CommentLike {
  id         String   @id @default(uuid())
  comment_id String
  user_id    String
  created_at DateTime @default(now())
  
  // Relations
  comment    ArticleComment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([comment_id, user_id])
  @@index([user_id])
  @@map("comment_likes")
}

model CommentReport {
  id          String   @id @default(uuid())
  comment_id  String
  user_id     String
  reason      String   // spam, inappropriate, offensive, harassment, other
  description String?  // Additional details
  status      String   @default("pending") // pending, reviewed, resolved, dismissed
  reviewed_by String?  // Admin who reviewed the report
  reviewed_at DateTime?
  created_at  DateTime @default(now())
  
  // Relations
  comment     ArticleComment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([comment_id, user_id])
  @@index([status])
  @@index([created_at])
  @@map("comment_reports")
}

model ArticleShare {
  id          String   @id @default(uuid())
  article_id  String
  user_id     String?  // Can be null for anonymous shares
  platform    String   // facebook, twitter, whatsapp, linkedin, telegram, copy, email, other
  share_url   String?  // Generated share URL with tracking
  ip_address  String?  // For anonymous tracking
  user_agent  String?  // Browser/device info
  referrer    String?  // Where the share originated
  created_at  DateTime @default(now())
  
  // Relations
  article     Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  
  @@index([article_id])
  @@index([user_id])
  @@index([platform])
  @@index([created_at])
  @@map("article_shares")
}

model Notification {
  id          String   @id @default(uuid())
  user_id     String   // Recipient
  sender_id   String?  // Who triggered the notification
  type        String   // comment_reply, comment_like, article_like, mention, system
  title       String
  message     String
  data        Json?    // Additional notification data
  read        Boolean  @default(false)
  read_at     DateTime?
  action_url  String?  // URL to navigate when clicked
  created_at  DateTime @default(now())
  expires_at  DateTime? // Optional expiration
  
  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  sender      User?    @relation("NotificationSender", fields: [sender_id], references: [id], onDelete: SetNull)
  
  @@index([user_id, read])
  @@index([created_at])
  @@index([type])
  @@map("notifications")
}

model SpamFilter {
  id          String   @id @default(uuid())
  pattern     String   // Regex pattern or keyword
  type        String   // keyword, regex, domain, ip
  action      String   // block, flag, moderate
  severity    Int      @default(1) // 1-10 severity level
  is_active   Boolean  @default(true)
  description String?
  created_by  String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@index([type, is_active])
  @@map("spam_filters")
}

model InteractionRateLimit {
  id          String   @id @default(uuid())
  user_id     String?  // Can be null for IP-based limiting
  ip_address  String?
  action_type String   // comment, like, share, report
  count       Int      @default(1)
  window_start DateTime @default(now())
  expires_at  DateTime
  
  @@index([user_id, action_type])
  @@index([ip_address, action_type])
  @@index([expires_at])
  @@map("interaction_rate_limits")
} 

// Loyalty System Models - Points, Badges, Achievements, Real-time Notifications

model LoyaltyPoint {
  id          String   @id @default(uuid())
  user_id     String
  points      Int      // النقاط المكتسبة أو المستهلكة
  action_type String   // comment, like, share, article_read, badge_earned, daily_login, etc.
  reference_id String? // معرف المرجع (ID التعليق، المقال، الشارة، إلخ)
  reference_type String? // comment, article, badge, achievement, etc.
  multiplier  Float    @default(1.0) // مضاعف النقاط (للأحداث الخاصة)
  description String?  // وصف العملية
  metadata    Json?    // بيانات إضافية
  expires_at  DateTime? // تاريخ انتهاء النقاط (للنقاط المؤقتة)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id, created_at])
  @@index([action_type])
  @@index([reference_id, reference_type])
  @@map("loyalty_points")
}

model Badge {
  id          String   @id @default(uuid())
  name        String   @unique
  name_ar     String   // الاسم بالعربية
  description String
  description_ar String // الوصف بالعربية
  icon        String   // رمز الشارة (emoji أو URL)
  color       String   @default("#FFD700") // لون الشارة
  category    String   // engagement, content, social, achievement, special
  tier        String   @default("bronze") // bronze, silver, gold, platinum, diamond
  points_required Int  @default(0) // النقاط المطلوبة للحصول على الشارة
  conditions  Json     // شروط الحصول على الشارة
  is_active   Boolean  @default(true)
  is_hidden   Boolean  @default(false) // شارات مخفية للمفاجآت
  sort_order  Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  user_badges UserBadge[]
  
  @@index([category, tier])
  @@index([is_active, is_hidden])
  @@map("badges")
}

model UserBadge {
  id          String   @id @default(uuid())
  user_id     String
  badge_id    String
  awarded_at  DateTime @default(now())
  awarded_by  String?  // معرف المستخدم/النظام الذي منح الشارة
  reason      String?  // سبب منح الشارة
  is_featured Boolean  @default(false) // عرض في الملف الشخصي
  progress    Json?    // تقدم المستخدم نحو الشارة
  metadata    Json?    // بيانات إضافية
  
  // Relations
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  badge       Badge    @relation(fields: [badge_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, badge_id])
  @@index([user_id, awarded_at])
  @@index([badge_id])
  @@map("user_badges")
}

model LoyaltyTransaction {
  id              String   @id @default(uuid())
  user_id         String
  transaction_type String  // earn, spend, transfer, bonus, penalty, refund
  points_amount   Int      // كمية النقاط (موجبة للكسب، سالبة للإنفاق)
  balance_before  Int      // الرصيد قبل العملية
  balance_after   Int      // الرصيد بعد العملية
  source_type     String   // system, admin, user, promotion, etc.
  source_id       String?  // معرف المصدر
  description     String
  reference_id    String?  // معرف العملية المرجعية
  reference_type  String?  // comment, article, badge, purchase, etc.
  metadata        Json?    // بيانات إضافية
  processed_at    DateTime @default(now())
  created_at      DateTime @default(now())
  
  // Relations
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id, processed_at])
  @@index([transaction_type])
  @@index([reference_id, reference_type])
  @@map("loyalty_transactions")
}

model Achievement {
  id          String   @id @default(uuid())
  name        String   @unique
  name_ar     String   // الاسم بالعربية
  description String
  description_ar String // الوصف بالعربية
  icon        String   // رمز الإنجاز
  category    String   // milestone, streak, social, content, special
  type        String   // one_time, repeatable, progressive
  difficulty  String   @default("easy") // easy, medium, hard, legendary
  points_reward Int    @default(0) // نقاط المكافأة
  conditions  Json     // شروط تحقيق الإنجاز
  progress_steps Json? // خطوات التقدم للإنجازات التدريجية
  is_active   Boolean  @default(true)
  is_secret   Boolean  @default(false) // إنجازات سرية
  sort_order  Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  user_achievements UserAchievement[]
  
  @@index([category, type])
  @@index([is_active, is_secret])
  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid())
  user_id       String
  achievement_id String
  progress      Json     // تقدم المستخدم
  current_step  Int      @default(0) // الخطوة الحالية
  total_steps   Int      @default(1) // إجمالي الخطوات
  is_completed  Boolean  @default(false)
  completed_at  DateTime?
  started_at    DateTime @default(now())
  last_progress_at DateTime @default(now())
  
  // Relations
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievement_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, achievement_id])
  @@index([user_id, is_completed])
  @@index([achievement_id])
  @@map("user_achievements")
}

model LoyaltyLevel {
  id          String   @id @default(uuid())
  name        String   @unique
  name_ar     String   // الاسم بالعربية
  description String
  description_ar String // الوصف بالعربية
  min_points  Int      // الحد الأدنى من النقاط
  max_points  Int?     // الحد الأقصى من النقاط (null للمستوى الأعلى)
  color       String   @default("#666666") // لون المستوى
  icon        String   // رمز المستوى
  benefits    Json     // مزايا المستوى
  multiplier  Float    @default(1.0) // مضاعف النقاط لهذا المستوى
  sort_order  Int      @default(0)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@index([min_points])
  @@index([is_active])
  @@map("loyalty_levels")
}

model NotificationTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  title       String   // عنوان الإشعار
  title_ar    String   // العنوان بالعربية
  message     String   // محتوى الإشعار
  message_ar  String   // المحتوى بالعربية
  type        String   // email, push, in_app, sms
  category    String   // loyalty, interaction, system, promotion
  variables   Json?    // متغيرات القالب
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@index([type, category])
  @@index([is_active])
  @@map("notification_templates")
}

model LoyaltyRule {
  id          String   @id @default(uuid())
  name        String   @unique
  name_ar     String   // الاسم بالعربية
  description String
  description_ar String // الوصف بالعربية
  action_type String   // comment, like, share, article_read, daily_login, etc.
  points      Int      // النقاط المكتسبة
  conditions  Json?    // شروط إضافية
  daily_limit Int?     // حد يومي للنقاط
  weekly_limit Int?    // حد أسبوعي للنقاط
  monthly_limit Int?   // حد شهري للنقاط
  multiplier_conditions Json? // شروط المضاعفات
  is_active   Boolean  @default(true)
  start_date  DateTime?
  end_date    DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@index([action_type])
  @@index([is_active])
  @@index([start_date, end_date])
  @@map("loyalty_rules")
}

model UserLoyaltyStats {
  id                    String   @id @default(uuid())
  user_id               String   @unique
  total_points_earned   Int      @default(0)
  total_points_spent    Int      @default(0)
  current_points        Int      @default(0)
  lifetime_points       Int      @default(0)
  current_level         String?  // مستوى الولاء الحالي
  badges_count          Int      @default(0)
  achievements_count    Int      @default(0)
  current_streak        Int      @default(0) // سلسلة الأيام المتتالية
  longest_streak        Int      @default(0) // أطول سلسلة
  last_activity_date    DateTime?
  level_progress        Json?    // تقدم نحو المستوى التالي
  monthly_points        Int      @default(0) // نقاط الشهر الحالي
  weekly_points         Int      @default(0) // نقاط الأسبوع الحالي
  daily_points          Int      @default(0) // نقاط اليوم الحالي
  last_reset_date       DateTime @default(now())
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relations
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([current_points])
  @@index([current_level])
  @@index([last_activity_date])
  @@map("user_loyalty_stats")
}

model RealTimeNotification {
  id              String   @id @default(uuid())
  user_id         String
  sender_id       String?  // معرف المرسل
  type            String   // comment_reply, like, badge_earned, achievement_unlocked, etc.
  category        String   // loyalty, interaction, system, social
  title           String
  message         String
  data            Json?    // بيانات إضافية
  action_url      String?  // رابط الإجراء
  icon            String?  // أيقونة الإشعار
  priority        String   @default("normal") // low, normal, high, urgent
  delivery_method String   @default("in_app") // in_app, push, email, sms
  read            Boolean  @default(false)
  read_at         DateTime?
  delivered       Boolean  @default(false)
  delivered_at    DateTime?
  scheduled_for   DateTime? // للإشعارات المجدولة
  expires_at      DateTime?
  metadata        Json?    // بيانات إضافية
  created_at      DateTime @default(now())
  
  // Relations
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  sender          User?    @relation("NotificationSender", fields: [sender_id], references: [id], onDelete: SetNull)
  
  @@index([user_id, read])
  @@index([type, category])
  @@index([created_at])
  @@index([priority])
  @@index([scheduled_for])
  @@map("realtime_notifications")
}

model UserNotificationSettings {
  id                    String   @id @default(uuid())
  user_id               String   @unique
  email_notifications   Boolean  @default(true)
  push_notifications    Boolean  @default(true)
  in_app_notifications  Boolean  @default(true)
  sms_notifications     Boolean  @default(false)
  loyalty_notifications Boolean  @default(true)
  interaction_notifications Boolean @default(true)
  system_notifications  Boolean  @default(true)
  marketing_notifications Boolean @default(false)
  notification_frequency String  @default("instant") // instant, hourly, daily, weekly
  quiet_hours_start     String?  // وقت بداية الساعات الهادئة
  quiet_hours_end       String?  // وقت نهاية الساعات الهادئة
  timezone              String   @default("Asia/Riyadh")
  preferences           Json?    // تفضيلات إضافية
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relations
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("user_notification_settings")
} 

// Add CommentAppeal model at the end
model CommentAppeal {
  id          String   @id @default(uuid())
  comment_id  String
  user_id     String
  reason      String?  // User's reason for appeal
  status      String   @default("pending") // pending, accepted, rejected
  admin_notes String?  // Admin notes on the appeal
  created_at  DateTime @default(now())
  reviewed_by String?  // Admin who reviewed the appeal
  reviewed_at DateTime?
  
  // Relations
  comment     ArticleComment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([comment_id])
  @@index([user_id])
  @@index([status])
  @@index([created_at])
  @@map("comment_appeals")
}

// AI Moderation Training Data
model ModerationTrainingData {
  id              String   @id @default(uuid())
  content         String   // The comment content
  human_decision  String   // approved, rejected, needs_review
  ai_prediction   String?  // AI's original prediction
  ai_confidence   Float?   // AI confidence level
  ai_category     String?  // AI's category prediction
  feedback_type   String   // correction, confirmation, improvement
  admin_id        String   // Admin who provided the feedback
  created_at      DateTime @default(now())
  
  // Relations
  admin           User     @relation(fields: [admin_id], references: [id])
  
  @@index([human_decision])
  @@index([ai_prediction])
  @@index([feedback_type])
  @@index([created_at])
  @@map("moderation_training_data")
}

// AI Moderation Configuration
model ModerationConfig {
  id                    String   @id @default(uuid())
  config_name           String   @unique
  ai_threshold_approve  Float    @default(0.3)  // Auto-approve if risk < this
  ai_threshold_reject   Float    @default(0.7)  // Auto-reject if risk > this
  categories_to_block   Json     @default("[]") // Categories to automatically block
  keywords_blacklist    Json     @default("[]") // Blacklisted keywords
  keywords_whitelist    Json     @default("[]") // Whitelisted keywords
  is_active             Boolean  @default(true)
  created_by            String
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relations
  creator               User     @relation(fields: [created_by], references: [id])
  
  @@map("moderation_config")
} 