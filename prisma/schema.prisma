// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String
  password_hash     String    // Updated field name for consistency
  role              String    @default("reader") // "reader" | "editor" | "admin"
  is_verified       Boolean   @default(false)
  is_active         Boolean   @default(true)
  avatar_url        String?
  bio               String?
  preferences       Json?     // JSON object for user preferences
  phone             String?   // Optional phone number
  failed_login_attempts Int   @default(0)
  locked_until      DateTime? // Account lockout timestamp
  password_reset_token String?
  password_reset_expires DateTime?
  email_verification_token String?
  email_verification_expires DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  last_login        DateTime?
  
  // Relations
  articles          Article[]
  sessions          Session[]
  analytics_events  AnalyticsEvent[]
  user_interests    UserInterest[]
  recommendations   Recommendation[]
  article_likes     ArticleLike[]
  article_bookmarks ArticleBookmark[]
  comments          Comment[]
  reason_feedback   RecommendationReasonFeedback[]
  audit_logs        AuditLog[]
  user_behavior     UserBehavior?
  user_sessions     UserSession[]
  
  @@map("users")
}

model Session {
  id             String    @id @default(uuid())
  user_id        String
  jwt_token      String    @unique // JWT token for this session
  refresh_token  String?   @unique // Optional refresh token
  device_info    Json?     // Device, browser, OS info
  ip_address     String?
  user_agent     String?   // Browser user agent
  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  expires_at     DateTime  // JWT expiration time
  last_used      DateTime  @default(now())
  
  // Relations
  user           User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  analytics_events AnalyticsEvent[]
  reason_feedback RecommendationReasonFeedback[]
  
  @@map("sessions")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  color       String?   // Hex color for UI
  icon        String?   // Icon name or URL
  is_active   Boolean   @default(true)
  sort_order  Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  articles    Article[]
  user_interests UserInterest[]
  
  @@map("categories")
}

model Article {
  id              String    @id @default(uuid())
  title           String
  slug            String    @unique
  summary         String?
  content         String
  featured_image  String?
  category_id     String
  author_id       String
  status          String    @default("draft") // draft, published, archived
  featured        Boolean   @default(false)
  view_count      Int       @default(0)
  like_count      Int       @default(0)
  comment_count   Int       @default(0)
  reading_time    Int?      // estimated reading time in minutes
  tags            String[]  // Array of tags
  seo_data        Json?     // SEO metadata
  published_at    DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  category        Category  @relation(fields: [category_id], references: [id])
  author          User      @relation(fields: [author_id], references: [id])
  analytics_events AnalyticsEvent[]
  recommendations Recommendation[]
  article_likes   ArticleLike[]
  article_bookmarks ArticleBookmark[]
  comments        Comment[]
  
  @@map("articles")
}

model AnalyticsEvent {
  id           String    @id @default(uuid())
  event_type   String    // page_view, scroll, like, share, comment, search, navigate, reading_time, etc.
  event_data   Json      // Additional event-specific data
  article_id   String?   // Related article (if applicable)
  user_id      String?   // User who performed the action (if logged in)
  session_id   String?   // Session identifier
  ip_address   String?   // For anonymous tracking
  user_agent   String?   // Browser/device information
  referrer     String?   // Where the user came from
  page_url     String?   // Current page URL
  timestamp    DateTime  @default(now())
  processed    Boolean   @default(false) // For batch processing
  
  // Relations
  article      Article?  @relation(fields: [article_id], references: [id])
  user         User?     @relation(fields: [user_id], references: [id])
  session      Session?  @relation(fields: [session_id], references: [id])
  
  @@map("analytics_events")
}

model UserInterest {
  id            String    @id @default(uuid())
  user_id       String
  category_id   String?
  topic         String?   // Specific topic/keyword
  interest_score Float    @default(0.0) // Calculated interest score
  decay_factor  Float    @default(1.0) // For time-based decay
  last_updated  DateTime  @default(now())
  created_at    DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [user_id], references: [id])
  category      Category? @relation(fields: [category_id], references: [id])
  
  @@unique([user_id, category_id])
  @@unique([user_id, topic])
  @@map("user_interests")
}

model Recommendation {
  id             String    @id @default(uuid())
  user_id        String
  article_id     String
  score          Float     // Recommendation score
  reason         String?   // Why this was recommended
  algorithm      String    // Which algorithm generated this
  context        String?   // Context of recommendation (homepage, article_page, etc.)
  shown_at       DateTime?
  clicked_at     DateTime?
  dismissed_at   DateTime?
  created_at     DateTime  @default(now())
  expires_at     DateTime? // When recommendation expires
  
  // Relations
  user           User      @relation(fields: [user_id], references: [id])
  article        Article   @relation(fields: [article_id], references: [id])
  reason_feedback RecommendationReasonFeedback[]
  
  @@unique([user_id, article_id, context])
  @@map("recommendations")
}

model RecommendationReasonFeedback {
  id                    String    @id @default(uuid())
  recommendation_id     String
  reason_text           String    // The reason text that was shown
  feedback              String    // "clear" | "unclear" | "helpful" | "not_helpful"
  note                  String?   // Optional user note
  improvement_suggestion String?   // Optional improvement suggestion
  user_id               String?   // User who provided feedback (if logged in)
  session_id            String?   // Session identifier
  ip_address            String?   // For anonymous feedback
  user_agent            String?   // Browser/device information
  created_at            DateTime  @default(now())
  
  // Relations
  recommendation        Recommendation @relation(fields: [recommendation_id], references: [id])
  user                  User?          @relation(fields: [user_id], references: [id])
  session               Session?       @relation(fields: [session_id], references: [id])
  
  @@map("recommendation_reason_feedback")
}

model ArticleLike {
  id         String   @id @default(uuid())
  user_id    String
  article_id String
  created_at DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [user_id], references: [id])
  article    Article  @relation(fields: [article_id], references: [id])
  
  @@unique([user_id, article_id])
  @@map("article_likes")
}

model ArticleBookmark {
  id         String   @id @default(uuid())
  user_id    String
  article_id String
  created_at DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [user_id], references: [id])
  article    Article  @relation(fields: [article_id], references: [id])
  
  @@unique([user_id, article_id])
  @@map("article_bookmarks")
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  user_id    String
  article_id String
  parent_id  String?  // For nested comments
  is_approved Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // Relations
  user       User     @relation(fields: [user_id], references: [id])
  article    Article  @relation(fields: [article_id], references: [id])
  parent     Comment? @relation("CommentReplies", fields: [parent_id], references: [id])
  replies    Comment[] @relation("CommentReplies")
  
  @@map("comments")
}

model Integration {
  id          String   @id @default(uuid())
  name        String   @unique
  type        String   // analytics, marketing, social, etc.
  config      Json     // Configuration data
  is_active   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@map("integrations")
}

model AuditLog {
  id          String   @id @default(uuid())
  user_id     String?  // User who performed the action (if applicable)
  action      String   // login, logout, failed_login, register, password_change, etc.
  resource    String?  // Resource affected (user, article, etc.)
  resource_id String?  // ID of the resource
  details     Json?    // Additional details about the action
  ip_address  String?  // IP address of the user
  user_agent  String?  // Browser/device information
  success     Boolean  @default(true)
  error_message String? // Error message if action failed
  created_at  DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [user_id], references: [id])
  
  @@map("audit_logs")
}

// Additional Analytics Models
model UserBehavior {
  id                    String   @id @default(uuid())
  user_id               String   @unique
  total_sessions        Int      @default(0)
  total_page_views      Int      @default(0)
  total_time_spent      Int      @default(0) // in seconds
  avg_session_duration  Float    @default(0)
  bounce_rate           Float    @default(0)
  pages_per_session     Float    @default(0)
  favorite_categories   Json?    // array of category preferences
  reading_speed         Float    @default(0) // words per minute
  interaction_score     Float    @default(0) // engagement score
  last_activity_at      DateTime?
  updated_at            DateTime @updatedAt
  created_at            DateTime @default(now())
  
  user User @relation(fields: [user_id], references: [id])
  
  @@map("user_behaviors")
}

model ContentAnalytics {
  id                String   @id @default(uuid())
  content_id        String   // article, page, or content identifier
  content_type      String   // article, page, video, etc.
  title             String?
  url               String?
  views             Int      @default(0)
  unique_views      Int      @default(0)
  avg_time_on_page  Float    @default(0)
  bounce_rate       Float    @default(0)
  shares            Int      @default(0)
  likes             Int      @default(0)
  comments          Int      @default(0)
  scroll_depth      Float    @default(0) // percentage
  conversion_rate   Float    @default(0)
  traffic_sources   Json?    // breakdown of traffic sources
  top_keywords      Json?    // search keywords leading to content
  performance_score Float    @default(0)
  updated_at        DateTime @updatedAt
  created_at        DateTime @default(now())
  
  @@unique([content_id, content_type])
  @@index([content_type])
  @@index([views])
  @@index([performance_score])
  @@map("content_analytics")
}

model UserSession {
  id              String   @id @default(uuid())
  user_id         String?
  session_id      String   @unique
  start_time      DateTime @default(now())
  end_time        DateTime?
  duration        Int?     // in seconds
  page_views      Int      @default(0)
  events_count    Int      @default(0)
  ip_address      String?
  user_agent      String?
  country         String?
  city            String?
  device_type     String?
  browser         String?
  os              String?
  referrer        String?
  landing_page    String?
  exit_page       String?
  is_bounce       Boolean  @default(false)
  conversion_goal String?
  converted       Boolean  @default(false)
  updated_at      DateTime @updatedAt
  
  user User? @relation(fields: [user_id], references: [id])
  
  @@index([user_id])
  @@index([start_time])
  @@index([session_id])
  @@map("user_sessions")
}

model RealtimeMetrics {
  id              String   @id @default(uuid())
  metric_type     String   // active_users, page_views, events, etc.
  metric_name     String
  value           Float
  dimensions      Json?    // additional breakdown data
  timestamp       DateTime @default(now())
  
  @@index([metric_type])
  @@index([timestamp])
  @@map("realtime_metrics")
} 