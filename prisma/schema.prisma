// Prisma schema for Sabq AI CMS
// قاعدة البيانات الشاملة لنظام سبق الذكي
// @version 2.1.0

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// نموذج المستخدمين
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  hashedPassword  String    @map("hashed_password")
  name            String
  phone           String?
  bio             String?
  avatar          String?
  status          UserStatus @default(ACTIVE)
  emailVerified   Boolean   @default(false) @map("email_verified")
  lastLoginAt     DateTime? @map("last_login_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // العلاقات
  articles        Article[]
  roles           UserRole[]
  sessions        Session[]
  notifications   UserNotification[]
  preferences     UserPreference[]
  auditLogs       AuditLog[]
  comments        ArticleComment[]
  likes           ArticleLike[]
  recommendations Recommendation[]
  feedbacks       RecommendationFeedback[]

  @@map("users")
}

// نموذج الأدوار
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions Json
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // العلاقات
  userRoles   UserRole[]

  @@map("roles")
}

// نموذج أدوار المستخدمين
model UserRole {
  userId    String @map("user_id")
  roleId    String @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  // العلاقات
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

// نموذج الجلسات
model Session {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  token      String   @unique
  expiresAt  DateTime @map("expires_at")
  deviceInfo String?  @map("device_info")
  ipAddress  String?  @map("ip_address")
  createdAt  DateTime @default(now()) @map("created_at")

  // العلاقات
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// نموذج التصنيفات
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String?
  icon        String?
  parentId    String?   @map("parent_id")
  isActive    Boolean   @default(true) @map("is_active")
  order       Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // العلاقات
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  articles    Article[]

  @@map("categories")
}

// نموذج العلامات
model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // العلاقات
  articles    ArticleTag[]

  @@map("tags")
}

// نموذج المقالات
model Article {
  id              String        @id @default(uuid())
  title           String
  slug            String        @unique
  summary         String
  content         String
  authorId        String        @map("author_id")
  categoryId      String        @map("category_id")
  status          ArticleStatus @default(DRAFT)
  imageUrl        String?       @map("image_url")
  imageAlt        String?       @map("image_alt")
  metaTitle       String?       @map("meta_title")
  metaDescription String?       @map("meta_description")
  featured        Boolean       @default(false)
  viewsCount      Int           @default(0) @map("views_count")
  likesCount      Int           @default(0) @map("likes_count")
  sharesCount     Int           @default(0) @map("shares_count")
  readTime        Int?          @map("read_time") // بالدقائق
  seoScore        Float?        @map("seo_score")
  publishedAt     DateTime?     @map("published_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // العلاقات
  author          User            @relation(fields: [authorId], references: [id])
  category        Category        @relation(fields: [categoryId], references: [id])
  tags            ArticleTag[]
  comments        ArticleComment[]
  likes           ArticleLike[]
  media           ArticleMedia[]
  analytics       AnalyticsEvent[]
  recommendations Recommendation[]

  @@map("articles")
}

// نموذج علامات المقالات
model ArticleTag {
  articleId String @map("article_id")
  tagId     String @map("tag_id")

  // العلاقات
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

// نموذج وسائط المقالات
model ArticleMedia {
  id         String    @id @default(uuid())
  articleId  String    @map("article_id")
  type       MediaType
  url        String
  filename   String?
  size       Int?      // بالبايت
  width      Int?
  height     Int?
  alt        String?
  caption    String?
  metadata   Json?
  createdAt  DateTime  @default(now()) @map("created_at")

  // العلاقات
  article    Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_media")
}

// نموذج تعليقات المقالات
model ArticleComment {
  id         String        @id @default(uuid())
  articleId  String        @map("article_id")
  userId     String        @map("user_id")
  parentId   String?       @map("parent_id")
  content    String
  status     CommentStatus @default(PENDING)
  likesCount Int           @default(0) @map("likes_count")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  // العلاقات
  article    Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent     ArticleComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies    ArticleComment[] @relation("CommentReplies")

  @@map("article_comments")
}

// نموذج إعجابات المقالات
model ArticleLike {
  id        String   @id @default(uuid())
  articleId String   @map("article_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // العلاقات
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([articleId, userId])
  @@map("article_likes")
}

// نموذج الأحداث التحليلية
model AnalyticsEvent {
  id         String   @id @default(uuid())
  type       String
  data       Json
  sessionId  String?  @map("session_id")
  userId     String?  @map("user_id")
  articleId  String?  @map("article_id")
  page       String?
  referrer   String?
  userAgent  String?  @map("user_agent")
  ipAddress  String?  @map("ip_address")
  country    String?
  city       String?
  device     String?
  browser    String?
  timestamp  DateTime @default(now())

  // العلاقات
  user       User?    @relation(fields: [userId], references: [id])
  article    Article? @relation(fields: [articleId], references: [id])

  @@index([type, timestamp])
  @@index([userId, timestamp])
  @@index([sessionId, timestamp])
  @@map("analytics_events")
}

// نموذج التوصيات
model Recommendation {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  articleId      String   @map("article_id")
  score          Float    @default(0.5)
  reason         String?
  recommendedAt  DateTime @default(now()) @map("recommended_at")
  clickedAt      DateTime? @map("clicked_at")
  
  // العلاقات
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article        Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  feedbacks      RecommendationFeedback[]

  @@unique([userId, articleId, recommendedAt])
  @@map("recommendations")
}

// نموذج تقييم التوصيات
model RecommendationFeedback {
  id               String         @id @default(uuid())
  recommendationId String         @map("recommendation_id")
  userId           String         @map("user_id")
  rating           Int?           // 1-5
  action           String         // clicked, ignored, saved, etc.
  timestamp        DateTime       @default(now())

  // العلاقات
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendation_feedbacks")
}

// نموذج تفضيلات المستخدم
model UserPreference {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  key         String
  value       Json
  updatedAt   DateTime @updatedAt @map("updated_at")

  // العلاقات
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_preferences")
}

// نموذج الإشعارات
model UserNotification {
  id         String           @id @default(uuid())
  userId     String           @map("user_id")
  type       NotificationType
  title      String
  message    String
  actionUrl  String?          @map("action_url")
  actionText String?          @map("action_text")
  isRead     Boolean          @default(false) @map("is_read")
  metadata   Json?
  createdAt  DateTime         @default(now()) @map("created_at")
  readAt     DateTime?        @map("read_at")

  // العلاقات
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notifications")
}

// نموذج نقاط الولاء
model LoyaltyPoint {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  points    Int
  reason    String
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  // العلاقات
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loyalty_points")
}

// نموذج سجل التدقيق
model AuditLog {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  action     String
  entity     String
  entityId   String   @map("entity_id")
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  summary    String?
  createdAt  DateTime @default(now()) @map("created_at")

  // العلاقات
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([entity, entityId])
  @@map("audit_logs")
}

// نموذج الإعدادات
model Setting {
  id          String      @id @default(uuid())
  key         String      @unique
  value       Json
  type        SettingType @default(STRING)
  category    String
  description String?
  isPublic    Boolean     @default(false) @map("is_public")
  updatedBy   String      @map("updated_by")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("settings")
}

// نموذج التكاملات
model Integration {
  id           String            @id @default(uuid())
  name         String
  type         IntegrationType
  provider     String
  isActive     Boolean           @default(true) @map("is_active")
  config       Json
  credentials  Json              // مشفرة
  lastSync     DateTime?         @map("last_sync")
  status       IntegrationStatus @default(PENDING)
  errorMessage String?           @map("error_message")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  @@map("integrations")
}

// الـ Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  ARRAY
}

enum IntegrationType {
  PAYMENT
  NOTIFICATION
  SOCIAL
  CDN
  ANALYTICS
  AI
  SEARCH
  EMAIL
  SMS
}

enum IntegrationStatus {
  PENDING
  CONNECTED
  ERROR
  DISABLED
} 