version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sabq-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sabq_cms
      POSTGRES_USER: sabq_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-strong_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - sabq-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sabq_user -d sabq_cms"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sabq-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sabq-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: sabq-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://sabq_user:${POSTGRES_PASSWORD:-strong_password_123}@postgres:5432/sabq_cms
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_jwt_refresh_secret_here}
      ML_SERVICE_URL: http://ml-service:8000
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sabq-network
    volumes:
      - ./api/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service (AI)
  ml-service:
    build:
      context: ./ml-services
      dockerfile: Dockerfile
    container_name: sabq-ml-service
    restart: unless-stopped
    environment:
      PYTHONPATH: /app
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sabq-network
    volumes:
      - ml_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sabq-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:4000/api
      NEXT_PUBLIC_ML_SERVICE_URL: http://ml-service:8000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - sabq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sabq-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/static:/var/www/static:ro
    depends_on:
      - frontend
      - backend
    networks:
      - sabq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local

# Networks
networks:
  sabq-network:
    driver: bridge 